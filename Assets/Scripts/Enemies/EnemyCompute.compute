#pragma kernel CSMain
static const int threadGroupSize = 64;

struct Enemy {
    float2 position;
    float2 velocity;

    float2 seperationVector;
    float2 alignmentVector;
    float2 cohesionVector;
    uint numPerceivedEnemies;
};

RWStructuredBuffer<Enemy> enemies;
uint numEnemies;
float viewDistance;
float viewAngle;

/*
This is a compute shader writen in HLSL (High Level Shader Language).
This compute shader calculates the correct values for each of vectors
below, that are used to govern the boids logic. This is done in a compute
shader so that I can take advantage of the GPU's much more efficant parallel
processing power, as each of these vectors requires looping over every other boid.
*/

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    if (id.x >= numEnemies) {
        return;
    }
    for (uint i = 0; i < numEnemies; i++) {
        if (id.x != i) {
            Enemy enemy = enemies[i];
            float2 offset = enemy.position - enemies[id.x].position;
            float squareDistance = offset.x * offset.x + offset.y * offset.y;

            if (squareDistance < viewDistance * viewDistance) {
                enemies[id.x].seperationVector += (enemies[id.x].position - enemy.position);
                enemies[id.x].alignmentVector += enemy.velocity;
                enemies[id.x].cohesionVector += enemy.position;
                enemies[id.x].numPerceivedEnemies += 1;
            }
        }
    }
}
